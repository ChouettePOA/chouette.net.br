<script>
	// Accessible dropdown behavior based on :
	// @link https://www.a11y-collective.com/design/mastering-web-accessibility-making-drop-down-menus-user-friendly/
	const menuItems = document.querySelectorAll(".js-dropdown");

	let expandedItem = null;

	const expandSubMenu = (item) => {
		const subMenu = item.querySelector("ul");
		const button = item.querySelector("button");
		expandedItem = item;

		// Required to avoid initial animation glitch.
		if (!item.classList.contains('has-toggled')) {
			item.classList.add('has-toggled');
		}

		subMenu.setAttribute("aria-hidden","false");
		button.setAttribute("aria-expanded","true");
		item.dataset.expanded = "true";

		// Focus on the first link in the submenu, or the active link.
		subMenu.querySelectorAll("a")[0].focus();
	};

	const collapseSubMenu = (item) => {
		const subMenu = item.querySelector("ul");
		const button = item.querySelector("button");
		expandedItem = null;

		subMenu.setAttribute("aria-hidden","true");
		button.setAttribute("aria-expanded","false");
		item.dataset.expanded = "false";
		button.focus(); // Focus back on the button
	};

	menuItems.forEach((item) => {
		const button = item.querySelector("button");

		button.addEventListener("click", (event) => {
			if (button.getAttribute("aria-expanded") === "false") {
				expandSubMenu(item);
			} else {
				collapseSubMenu(item);
			}
		});

		// item.addEventListener("mouseenter", () => {
		// 	expandSubMenu(item);
		// });

		// item.addEventListener("mouseleave", () => {
		// 	collapseSubMenu(item);
		// });

		// Handling keyboard navigation
		button.addEventListener("keydown", (event) => {
			if (event.key === "Enter" || event.key === " ") { // Space or Enter key
				event.preventDefault(); // Prevent the default action to stop scrolling when pressing Space
				if (button.ariaExpanded === "false") {
					expandSubMenu(item);
				} else {
					collapseSubMenu(item);
				}
			}
		});

		// Handling tab key inside submenu to loop back to the button
		const subMenuLinks = item.querySelectorAll("ul a");
		if (subMenuLinks.length) {
			const lastLink = subMenuLinks[subMenuLinks.length - 1];
			lastLink.addEventListener("keydown", (event) => {
				if (event.key === "Tab" && !event.shiftKey) {
					event.preventDefault();
					button.focus(); // Move focus back to the button
				}
			});
		}
	});
</script>

<nav-dropdown webc:root class="MainNav-wrap">
	<nav class="MainNav js-dropdown" aria-labelledby="pages-heading">
		<h2 class="visually-hidden" id="pages-heading">Pages navigation</h2>
		<button class="MainNav-toggle" aria-label="Toggle menu" aria-expanded="false">
			<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 185.343 185.343" xml:space="preserve">
				<path d="M51.707 185.343a10.692 10.692 0 0 1-7.593-3.149 10.724 10.724 0 0 1 0-15.175l74.352-74.347L44.114 18.32c-4.194-4.194-4.194-10.987 0-15.175 4.194-4.194 10.987-4.194 15.18 0l81.934 81.934c4.194 4.194 4.194 10.987 0 15.175l-81.934 81.939a10.678 10.678 0 0 1-7.587 3.15z"/>
			</svg>
		</button>
		<div class="MainNav-items s-invert" aria-hidden="true">
			<ul>
				<li webc:for="link of $data.main_menu.links">
					<a
						:href="link.href"
						:aria-current="$data.page.url == link.href ? 'page' : false"
						@text="link.title"
					></a>
				</li>
			</ul>
		</div>
	</nav>
</nav-dropdown>

<style>
	.MainNav-wrap {
		display: block;
		position: absolute;
		top: 0;
		width: 100%;
	}

	@media (min-width: 60rem) {
		.MainNav-wrap {
			display: none;
		}
	}

	.MainNav {
		position: relative;
		padding: .25rem .5rem;
	}

	.MainNav-toggle {
		position: absolute;
		right: 0;
		top: var(--space-s);
		z-index: 2;
		border: 0 none;
		padding: var(--space-2xs) var(--space-s);
		cursor: pointer;
	}
	.MainNav-toggle > svg {
		width: 2em;
		transform: rotate(90deg);
		transition: transform 0.2s ease-in-out;
	}
	.MainNav-toggle[aria-expanded="true"] > svg {
		transform: rotate(-90deg);
	}

	.MainNav-toggle,
	.MainNav-items.s-invert {
		background-color: var(--overlay-white-bg-color);
	}

	.MainNav-items {
		visibility: hidden;
		position: absolute;
		top: 0;
		left: 0;
		margin: 0;
		padding: 0;
		width: 100%;
		transform: translate(0, calc(var(--size-0) * -2 - 100%));
		transition: transform 0.3s cubic-bezier(0.77, 0.2, 0.05, 1.0);
	}
	.MainNav.has-toggled .MainNav-items {
		visibility: visible;
	}
	.MainNav[data-expanded="true"] > .MainNav-items {
		transform: none;
	}

	.MainNav-items ul {
		margin: var(--space-s) 0 0 0;
		padding: var(--space-l) var(--space-l) var(--space-l) var(--space-s);
		list-style: none;
		text-align: right;
	}

	.MainNav-items li + li {
		margin-top: var(--space-s);
	}

	.MainNav-items a {
		font-size: var(--size-1);
		line-height: utopia.clamp(26, 30);
	}
</style>
