<!---
--->

<script>
  class Ro extends HTMLElement {
    connectedCallback() {
      const element = this.querySelector("ro");
      // Swap out the template with its contents so they become visible.
      element.replaceWith(template.content);
    }
  }
  customElements.define("ro", Ro);
</script>

<!---
--->

<script webc:type="js" context="module">
	// console.log(Object.keys(this));
	// console.log(uid);
	console.log(uid + ' from the <script context="module">.');

	/**
	 * Converts current font-size to any value.
	 */
	function fontSizeTo(format) {
		const component = document.getElementById(uid);

		// div.style.width = "1000em";
		// parentElement.appendChild(div);
		// var pixels = div.offsetWidth / 1000;
		// parentElement.removeChild(div);
		// return pixels;

		let test = document.createElement('div');

		Object.assign(test.style, {
			position: 'absolute',
			width: component.style.fontSize
		});

		component.target.appendChild(test);
		let pixels = test.offsetWidth;
		component.target.removeChild(test);

		return pixels;
	}
</script>

<!---
<script webc:type="js">
	// console.log(Object.keys(this));
	console.log(Object.keys($data));
	// console.log(Object.keys($data.eleventy));
	// console.log(Object.keys($data.eleventy.env));

	const uid = this.uid;
	// const self = document.getElementById(uid);

	// console.log(self);
	console.log(uid + ' from the <script>.');
	// console.log(uid + ' source = ' + $data.eleventy.env.source);
	// console.log(uid + ' root = ' + $data.eleventy.env.root);

	// document.getElementById(uid + '--after').textContent = uid;
	''
</script>
--->

<ro webc:root>
	<span :id="uid">
		<span :id="uid + '--before'"></span>
		<span>
			<slot></slot>
		</span>
		<span :id="uid + '--after'"></span>
	</span>
</ro>

<!---
--->
