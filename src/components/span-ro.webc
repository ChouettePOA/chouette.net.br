<script>
  /**
	 * TODO [wip]
	 * @link https://11ty.rocks/posts/introduction-webc/
	 * @link https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements
	 * @link https://www.zachleat.com/web/a-taxonomy-of-web-component-types/
	 */
  class SpanRo extends HTMLElement {

		/**
		 * Converts current font-size to any value.
		 */
		fontSizeTo(format) {
			// const component = document.getElementById(uid);

			// div.style.width = "1000em";
			// parentElement.appendChild(div);
			// var pixels = div.offsetWidth / 1000;
			// parentElement.removeChild(div);
			// return pixels;

			let test = document.createElement('div');

			// TODO [wip]
			Object.assign(test.style, {
				position: 'absolute',
				width: component.style.fontSize
			});

			component.target.appendChild(test);
			let pixels = test.offsetWidth;
			component.target.removeChild(test);

			return pixels;
		}

		/**
		 * Instanciation callback.
		 */
    connectedCallback() {
			// Debug.
			// console.log(this);
			// console.log(this.getAttributeValue('id'));

      // const template = this.querySelector("template");
      // const component = this.firstChild();
      // const uid = component.getAttribute("id");

			// Debug.
			// console.log(template);
			// console.log(template.getAttributeValue('id'));
			// console.log(template.content);
			// console.log(template.content.getAttributeValue('id'));
			// console.log(uid + ' from the connectedCallback()');

      // Swap out the template with its contents so they become visible.
      // template.replaceWith(template.content);
    }
  }

  customElements.define("span-ro", SpanRo);
</script>

<!---
<script webc:type="js" context="module">
	// Debug.
	// console.log(Object.keys(this));
	// console.log(uid);
	console.log(uid + ' from the <script context="module">.');
</script>
--->

<!---
<script webc:type="js">
	// Debug.
	// console.log(Object.keys(this));
	console.log(Object.keys($data));
	// console.log(Object.keys($data.eleventy));
	// console.log(Object.keys($data.eleventy.env));

	const uid = this.uid;
	// const self = document.getElementById(uid);

	// Debug.
	// console.log(self);
	console.log(uid + ' from the <script>.');
	// console.log(uid + ' source = ' + $data.eleventy.env.source);
	// console.log(uid + ' root = ' + $data.eleventy.env.root);

	// document.getElementById(uid + '--after').textContent = uid;
	''
</script>
--->

<!---
<r-o webc:root>
<span-ro>
<template>
--->
<template webc:root class="SpanRo" :id="uid">
	<span class="SpanRo-before"></span>
	<slot></slot>
	<span class="SpanRo-after"></span>
</template>
<!---
</span-ro>
</r-o>
--->

<!---
<span :id="uid">
	<span :id="uid + '--before'"></span>
	<span>
		<slot></slot>
	</span>
	<span :id="uid + '--after'"></span>
</span>
--->
