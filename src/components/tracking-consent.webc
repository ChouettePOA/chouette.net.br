<!--
/**
 * @file
 * Tracking (Cookie) consent component.
 *
 * Partially based on cookiesjsr
 * @link https://github.com/jfeltkamp/cookiesjsr
 */
-->

<script>
	getConsent(document).render();

	/**
	 * Minimalist "singleton".
	 *
	 * Defaults to : document.consent
	 */
	function getConsent(d, n) {
		if (!d) {
			d = document;
		}

		if (!n) {
			n = 'consent';
		}

		if (n in d) {
			return d[n];
		}

		// Version the local storage key to facilitate future data structure changes.
		const localStorageId = n + '_state_v1';

		// Part of the state is not meant to be stored : the third-party code
		// injection "locks".
		const volatileState = { alreadyInjected: [] };

		/**
		 * Syncs state to DOM.
		 *
		 * Also handles "locks" for tracking-related scripts injection into document
		 * in order to only load them once when they are chosen (opt-in).
		 *
		 * Applies (idempotent) the "correct" DOM state for :
		 *
		 * 1. Banner (open / closed)
		 * 2. Dialog checkboxes (checked / unchecked)
		 * 3. Fallback markup anywhere in current document (e.g. YouTube lite embed
		 * 	fallback target blank links)
		 * 4. Initial third-party code injection (no tracking code loaded without
		 *  previously saved consent).
		 */
		const render = (state) => {
			if (!state) {
				state = read();
			}

			// Debug.
			// console.log("render()");
			// console.log(state.optIn);

			// 1. Keep Banner closed if options previously saved. Only open when absent.
			if (!state.isLocallyStored) {
				bannerOpen();
			} else {
				// 4. Initial third-party code injection (if any opt-in).
				// NOT triggered when checkboxes are checked.
				// @see update()
				// @see save()
				inject3rdParty(state);
			}

			// 2.1. Checkboxes to uncheck (whitelist by opt-in).
			const checkboxes = document.querySelectorAll(`#ConsentDialog input[type="checkbox"]`);
			checkboxes.forEach((checkbox) => {
				if (!state.optIn.includes(checkbox.getAttribute('value'))) {
					checkbox.parentNode.classList.remove('active');
					checkbox.parentNode.setAttribute("title", "Negar");
				}
			});

			// 2.2. Checkboxes to check.
			state.optIn.forEach((key) => {
				const activeCheckboxes = document.querySelectorAll(`#ConsentDialog input[type="checkbox"][value="${key}"]`);
				activeCheckboxes.forEach((checkbox) => {
					// Debug.
					// console.log(checkbox);
					if (!checkbox.parentNode.classList.contains('active')) {
						checkbox.parentNode.classList.add('active');
						checkbox.parentNode.setAttribute("title", "Permitir");
					}
				});
			});

			// 3.1. .Consent-fallback elements to display.
			const elements2Show = document.querySelectorAll(`.Consent-fallback`);
			elements2Show.forEach((element) => {
				// Debug.
				// console.log(element);
				if (!state.optIn.includes(element.getAttribute('data-opt-in'))) {
					element.setAttribute("aria-hidden", "false");
				}
			});

			// 3.2. .Consent-fallback elements to hide.
			state.optIn.forEach((key) => {
				const elements2Hide = document.querySelectorAll(`.Consent-fallback[data-opt-in="${key}"]`);
				elements2Hide.forEach((element) => {
					// Debug.
					// console.log(element);
					element.setAttribute("aria-hidden", "true");
				});
			});
		};

		/**
		 * Handles third-party code injection.
		 */
		const inject3rdParty = (state) => {
			// 4.1. Third-party injection : "Google Tag Manager" tracking.
			if (state.optIn.includes('gtm') && !volatileState.alreadyInjected.includes('gtm')) {
				volatileState.alreadyInjected.push('gtm');

				// Debug.
				console.log("injecting <!-- Google Tag Manager -->");

				// <!-- Google Tag Manager -->
				// (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src='https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);})(window,document,'script','dataLayer','GTM-NC4L7JLL');
				window['dataLayer'] = window['dataLayer'] || [];
				window['dataLayer'].push({
					'gtm.start': new Date().getTime(),
					event: 'gtm.js'
				});
				let j = document.createElement('script');
				j.async = true;
				j.src = 'https://www.googletagmanager.com/gtm.js?id=GTM-NC4L7JLL';
				let f = document.getElementsByTagName('script')[0];
				f.parentNode.insertBefore(j, f);
				// <!-- End Google Tag Manager -->
			}

			// 4.2. Third-party injection : "Meta Pixel" tracking.
			if (state.optIn.includes('mpixel') && !volatileState.alreadyInjected.includes('mpixel')) {
				volatileState.alreadyInjected.push('mpixel');

				// Debug.
				console.log("injecting <!-- Meta Pixel Code -->");

				// <!-- Meta Pixel Code -->
				// !function(f,b,e,v,n,t,s){if(f.fbq)return;n=f.fbq=function(){n.callMethod?n.callMethod.apply(n,arguments):n.queue.push(arguments)};if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';n.queue=[];t=b.createElement(e);t.async=!0;t.src=v;s=b.getElementsByTagName(e)[0];s.parentNode.insertBefore(t,s)}(window, document,'script','https://connect.facebook.net/en_US/fbevents.js');fbq('init', '3496132583785503');fbq('track', 'PageView');
				let n = window.fbq = () => {
					n.callMethod ?
						n.callMethod.apply(n, arguments) :
						n.queue.push(arguments);
				};
				if (!window._fbq) {
					window._fbq = n;
				}
				n.push = n;
				n.loaded = !0;
				n.version = '2.0';
				n.queue = [];
				let t = document.createElement('script');
				t.async = !0;
				t.src = 'https://connect.facebook.net/en_US/fbevents.js';
				let s = document.getElementsByTagName('script')[0];
				s.parentNode.insertBefore(t, s);
				window.fbq('init', '3496132583785503');
				window.fbq('track', 'PageView');
				// <!-- End Meta Pixel Code -->
			}

			// 4.3. Third-party injection : Youtube player (inject lite-yt-embed.js).
			if (state.optIn.includes('yt') && !volatileState.alreadyInjected.includes('yt')) {
				volatileState.alreadyInjected.push('yt');

				// Debug.
				console.log("injecting <!-- Youtube Lite Player -->");

				// <!-- Youtube Lite Player -->
				let j = document.createElement('script');
				j.async = true;
				j.src = '/js/lite-yt-embed.js';
				let f = document.getElementsByTagName('script')[0];
				f.parentNode.insertBefore(j, f);
				// <!-- End Youtube Lite Player -->
			}
		};

		/**
		 * Reads the up-to-date state.
		 *
		 * Last values are overriding lower layers, in this order :
		 * 	- defaults
		 * 	- localStorage
		 */
		const read = () => {
			let defaultState = {
				isLocallyStored: false,
				optIn: [],
			};

			// Debug.
			// console.log('read state');
			// console.log(volatileState.alreadyInjected);

			if (typeof localStorage === 'undefined') {
				console.error("localStorage not found.");
				return defaultState;
			}

			const storedState = localStorage.getItem(localStorageId);

			if (storedState && storedState.length) {
				return JSON.parse(storedState);
			}

			return defaultState;
		};

		/**
		 * Writes given state in local storage.
		 */
		const write = function (state) {
			if (typeof localStorage === 'undefined') {
				console.error("localStorage not found.");
				return;
			}

			state.isLocallyStored = true;

			// Debug.
			// console.log('write state');
			// console.log('  state.optIn :');
			// console.log(state.optIn);

			return localStorage.setItem(
				localStorageId,
				JSON.stringify(state)
			);
		};

		/**
		 * Saves an option (opt-ins deletion or addition).
		 */
		const update = (key, value) => {
			const whitelist = ['gtm', 'mpixel', 'yt'];

			if (!whitelist.includes(key)) {
				console.error("key not whitelisted.");
				return;
			}

			if (typeof value != "boolean") {
				console.error("value not boolean.");
				return;
			}

			const state = read();
			let stateNeedsWrite = false;

			// Handle deletion (removes opt-in).
			if (!value && state.optIn.includes(key)) {
				state.optIn = state.optIn.filter(e => e !== key);
				stateNeedsWrite = true;
			}

			// Handle addition (adds opt-in).
			if (value && !state.optIn.includes(key)) {
				state.optIn.push(key);
				stateNeedsWrite = true;
			}

			if (stateNeedsWrite) {
				// Debug.
				// console.log(`update(${key}, ${value}) -> write :`);
				// console.log(state.optIn);

				write(state);
			}

			render(state);
		};

		/**
		 * Denies everything trackable at once.
		 */
		const denyAll = () => {
			const state = read();

			// Debug.
			// console.log("denyAll()");
			// console.log(state);
			// console.log(state.optIn);
			// console.log(state.optIn.length);

			if (state.optIn.length > 0) {
				state.optIn = [];
				write(state);
				render(state);
			} else if (!state.isLocallyStored) {
				// First time call : needs to at least set isLocallyStored true.
				state.isLocallyStored = true;
				write(state);
				render(state);
			}

			dialogClose();
			bannerClose();
		};

		/**
		 * Allows everything trackable at once.
		 */
		const allowAll = () => {
			const state = read();

			// Debug.
			// console.log("allowAll()");
			// console.log(state);
			// console.log(state.optIn);
			// console.log(state.optIn.length);

			if (state.optIn.length < 3) {
				state.optIn = ['gtm', 'mpixel', 'yt'];
				write(state);
				render(state);
			} else if (!state.isLocallyStored) {
				// First time call : needs to at least set isLocallyStored true.
				state.isLocallyStored = true;
				write(state);
				render(state);
				inject3rdParty(state);
			}

			dialogClose();
			bannerClose();
		};

		/**
		 * Writes + renders current state "as is".
		 *
		 * Injects third-party code corresponding to opt-ins.
		 */
		const save = () => {
			const state = read();

			// First time call : needs to at least set isLocallyStored true.
			if (!state.isLocallyStored) {
				state.isLocallyStored = true;
				write(state);
				render(state);
			}

			inject3rdParty(state);

			dialogClose();
			bannerClose();
		};

		const bannerOpen = () => {
			const banner = document.querySelector("#ConsentBanner");
			banner.classList.add('active');
			banner.setAttribute("aria-hidden", "false");
		};

		const bannerClose = () => {
			const banner = document.querySelector("#ConsentBanner");
			banner.classList.remove('active');
			banner.setAttribute("aria-hidden", "true");
		};

		const dialogOpen = () => {
			const dialog = document.querySelector("#ConsentDialog");
			dialog.classList.add('active');
			dialog.setAttribute("aria-hidden", "false");
		};

		const dialogClose = () => {
			const dialog = document.querySelector("#ConsentDialog");
			dialog.classList.remove('active');
			dialog.setAttribute("aria-hidden", "true");
		};

		// Exposed ("public") methods.
		const Consent = {
			render,
			update,
			save,
			denyAll,
			allowAll,
			bannerOpen,
			bannerClose,
			dialogOpen,
			dialogClose
		};

		d[n] = Consent;

		return Consent;
	}
</script>

<div id="Consent">
	<div class="Consent--app">
		<tracking-consent-banner webc:nokeep></tracking-consent-banner>
		<tracking-consent-dialog webc:nokeep></tracking-consent-dialog>
	</div>
</div>

<style>
	.Consent-fallback[aria-hidden="true"] {
		display: none;
	}

	.Consent-btn {
		cursor: pointer;
		font: inherit;
		width: calc(100% - 2.5em);
		text-transform: uppercase;
		font-size: .85em;
		padding: 0;
		text-decoration: none;
		white-space: nowrap;
		margin: .625em;
		opacity: .95;
		transform: scale(1);
		transition: all .3s ease;
		display: flex;
		align-items: center;
		justify-content: center;
		min-height: 42px;
		color: var(--btn-font-color, #FFF);
		border: 2px solid var(--btn-border-color, #FFF);
		background-color: var(--btn-bg-color, #004c93)
	}

	@media (min-width: 576px) {
		.Consent-btn {
			min-height: 48px
		}
	}

	.Consent-btn:hover {
		opacity: 1;
		transform: scale(1.02)
	}

	.Consent-btn.invert {
		color: var(--btn-inv-font-color, #004c93);
		border-color: var(--btn-inv-border-color, #004c93);
		background-color: var(--btn-inv-bg-color, #FFF)
	}

	.Consent-btn.important {
		color: var(--btn-prime-font-color, #004c93);
		border-color: var(--btn-prime-border-color, #FFF);
		background-color: var(--btn-prime-bg-color, #FFF)
	}

	.Consent-btn.important.invert {
		color: var(--btn-prime-inv-font-color, #FFF);
		border-color: var(--btn-prime-inv-border-color, #004c93);
		background-color: var(--btn-prime-inv-bg-color, #004c93)
	}

	.Consent-links {
		list-style: none;
		margin: 0 -.75em;
		padding: 0;
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
		justify-content: left;
		align-items: center
	}

	.Consent-links.links--row li {
		margin: 0;
		padding-left: .75em;
		padding-right: .75em;
		position: relative
	}

	.Consent-links.links--row li a {
		margin: 0;
		padding: 0;
		/* line-height: 2em; */
		display: inline-block
	}

	.Consent-links.links--row li:last-child:before {
		content: none
	}

	.Consent-links.links--row li:before {
		content: "";
		position: absolute;
		top: 50%;
		right: 0;
		width: .3em;
		height: .3em;
		background-color: var(--link-list-separator-color, #FFF);
		transform: translate(50%, -40%)
	}

	.Consent-btn.denyAll {
		white-space: wrap
	}

	@media (min-width: 1200px) {
		.Consent-btn.denyAll {
			display: inline-block
		}
	}

	.Consent-switch {
		position: relative;
		margin: 0;
		padding: 0;
		display: block;
		width: var(--switch-width, 45px);
		height: var(--switch-height, 20px);
		border-radius: var(--switch-height, 20px);
		background-color: var(--switch-bg-off, #FFF);
		cursor: pointer;
		box-shadow: inset -1px 2px 1px #00000040;
		border: 0;
		transition: background-color .1s ease-in-out
	}

	.Consent-switch:focus-within:before {
		content: "";
		position: absolute;
		width: 100%;
		height: 100%;
		border-radius: 10px;
		border: 1px dotted #eee;
		transform: scale(1.4)
	}

	.Consent-switch:after {
		content: "";
		position: absolute;
		top: 0;
		left: 0;
		display: block;
		width: var(--switch-height, 20px);
		height: var(--switch-height, 20px);
		border-radius: var(--switch-height, 20px);
		transform: scale(1.2);
		background-color: var(--switch-handle-color, #FFF);
		border: 1px solid var(--switch-border-color, #e4e5e6);
		transition: left .1s ease-in-out;
		box-shadow: -1px 2px 1px #00000040
	}

	.Consent-switch.active {
		background-color: var(--switch-bg-on, #00AA00)
	}

	.Consent-switch.active:after {
		left: 25px
	}

	.Consent-switch input[type=checkbox] {
		position: absolute;
		opacity: 0
	}

	.Consent-banner {
		position: fixed;
		z-index: 100;
		left: 1em;
		width: 66ch;
		height: auto;
		max-width: calc(100vw - 2em);
		max-height: calc(100vh - 2em);
		display: flex;
		flex-direction: column;
		justify-content: flex-start;
		align-items: center;
		box-shadow: var(--banner-box-shadow, 1px 1px 6px 4px rgba(0, 0, 0, .2));
		padding: 1em;
		background-color: var(--banner-bg-color, #004c93);
		color: var(--banner-font-color, #FFF);
		overflow: auto;
		transform: translateY(100%);
		transition: transform .3s ease-in-out
	}

	.Consent-banner.active {
		transform: translateY(0);
		bottom: 1em;
	}

	.Consent-banner a {
		color: var(--link-list-font-color, #FFF)
	}

	.Consent-banner--info,
	.Consent-banner--action {
		width: 100%
	}

	.Consent-banner--info {
		margin-bottom: var(--default-margin, 1.25em);
		max-height: calc(100vh - 100px - 2.5em);
		overflow: hidden;
		overflow-y: auto;
	}

	.Consent-banner--links {
		margin-top: .5em;
		font-size: .85em
	}

	.Consent-banner--action {
		display: flex;
		flex-direction: row;
		flex-wrap: wrap;
		justify-content: center;
		padding: 0
	}

	.Consent-banner button.settings,
	.Consent-banner button.denyAll,
	.Consent-banner button.allowAll {
		display: inline-block;
		white-space: wrap;
		width: auto;
		padding: 0 .5em
	}

	.Consent-service-groups {
		position: static !important;
		display: block;
		max-height: 100%;
		overflow: auto;
		list-style: none;
		margin: 0 0 -1px !important;
		padding: 0 !important
	}

	.Consent-service-group {
		position: static !important;
		/* line-height: 1.5em; */
		list-style: none
	}

	.Consent-service-group--tab {
		min-height: 3em;
		padding: 1em var(--default-margin, 1.25em);
		display: block;
		width: 100%;
		text-decoration: none;
		text-align: left;
		cursor: pointer;
		font-weight: 700;
		margin: 0;
		border: 0;
		color: var(--layer-tab-font-color, #000f37);
		background: var(--layer-tab-bg-color, #FFF);
		border-bottom: 1px solid var(--layer-border-color, #e4e5e6);
		-webkit-appearance: none;
		-moz-appearance: none;
		appearance: none;
	}

	.Consent-service-group--tab:last-child {
		border-bottom: 0
	}

	@media (min-width: 768px) {
		.Consent-service-group--tab {
			padding: 1em 3.25em 1em 1.25em;
			width: calc(30% + 2em)
		}
	}

	.Consent-service-group--content {
		display: none
	}

	@media (min-width: 768px) {
		.Consent-service-group--content {
			position: absolute;
			width: 70%;
			height: 100%;
			overflow: auto;
			right: 0;
			top: 0
		}
	}

	.Consent-service-group--intro {
		padding: 1em var(--default-margin, 1.25em)
	}

	.Consent-service-group.active .Consent-service-group--tab {
		color: var(--layer-tab-active-font-color, #FFF);
		background: var(--layer-tab-active-bg-color, #004c93);
		border-bottom: 0 none
	}

	.Consent-service-group.active .Consent-service-group--content {
		display: block;
		color: var(--layer-tab-active-font-color, #FFF);
		background: var(--layer-tab-active-bg-color, #004c93);
		font-weight: 500
	}

	.Consent-service-group--services {
		margin: 0 !important;
		padding: 0 !important
	}

	.Consent-service {
		display: flex;
		align-items: center;
		background-color: #e4e5e600;
		transition: background-color .3s ease
	}

	.Consent-service:hover {
		background-color: #e4e5e61a
	}

	.Consent-service--description {
		padding: .625em 1.25em;
		width: calc(100% - 2.5em - 45px)
	}

	.Consent-service--description h3 {
		margin: 0;
		font-size: 1.125em;
		font-weight: 400;
		color: var(--layer-font-light, #FFF)
	}

	.Consent-service--links a {
		color: var(--layer-font-light, #FFF);
		font-size: .75em
	}

	.Consent-service--links a:hover,
	.Consent-service--links a:active,
	.Consent-service--links a:visited {
		color: var(--layer-font-light, #FFF)
	}

	.Consent-service--action {
		padding: .625em 1.25em;
		width: calc(2.5em + 45px)
	}

	.Consent-service--always-on {
		color: var(--switch-always-on-font-color, #00AA00);
		text-align: right;
		display: flex;
		justify-content: flex-end;
		white-space: nowrap
	}

	.Consent-service--always-on span {
		background-color: var(--switch-always-on-bg-color, #FFF);
		padding: 0 .5em
	}

	.Consent-layer {
		display: block;
		position: fixed;
		left: 50%;
		top: 50%;
		transform: translate(-50%, -50%);
		background: var(--layer-header-bg-color, #FFF);
		box-shadow: var(--banner-box-shadow, 1px 1px 6px 4px rgba(0, 0, 0, .2));
		height: 100vh;
		width: 100vw;
		max-width: 100%;
		z-index: 314160;
		padding: var(--layer-header-height, 3.5em) 0 var(--layer-footer-height, 4.5em);
		overflow: hidden;
		/* line-height: 1.5em */
	}

	@media (min-height: 668px) {
		.Consent-layer {
			height: 80vh;
			max-height: 575px
		}
	}

	@media (min-height: 992px) {
		.Consent-layer {
			height: 60vh
		}
	}

	@media (min-width: 768px) {
		.Consent-layer {
			width: 860px
		}
	}

	.Consent-layer--overlay {
		position: fixed;
		z-index: 314159;
		height: 100vh;
		width: 100vw;
		left: 0;
		top: 0;
		background: #0006;
		border: 0
	}

	.Consent-layer--header {
		position: absolute;
		left: 0;
		top: 0;
		z-index: 100;
		width: 100%;
		display: flex;
		align-items: center;
		justify-content: space-between;
		background-color: #fff;
		margin: 0;
		background: var(--layer-header-bg-color, #FFF);
		padding: 0 var(--default-margin, 1.25em);
		border-bottom: 1px solid var(--layer-border-color, #e4e5e6);
		height: 3.5em
	}

	.Consent-layer--title {
		color: var(--layer-header-font-color, #000f37);
		text-transform: uppercase
	}

	.Consent-layer--close {
		z-index: 102;
		width: 1em;
		height: 1em;
		background: transparent url("data:image/svg+xml,%0A%3Csvg width='27px' height='27px' viewBox='0 0 27 27' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3E%3Cg id='Welcome' stroke='none' stroke-width='1' fill='none' fill-rule='evenodd'%3E%3Cg id='tarte-close' transform='translate(-1264.000000, -2628.000000)' fill='%23000f37'%3E%3Cg id='Group-2' transform='translate(155.000000, 2591.000000)'%3E%3Cg id='Group-3-Copy-2'%3E%3Cpolygon id='Page-1' points='1133.26296 37 1122.50065 47.762319 1111.73704 37 1109 39.7370358 1119.76361 50.5006452 1109 61.2629642 1111.73704 64 1122.50065 53.2363906 1133.26296 64 1136 61.2629642 1125.23768 50.5006452 1136 39.7370358'%3E%3C/polygon%3E%3C/g%3E%3C/g%3E%3C/g%3E%3C/g%3E%3C/svg%3E") no-repeat center center scroll;
		background-size: contain;
		text-indent: -999em;
		overflow: hidden;
		border: 0;
		cursor: pointer;
		padding: 0;
		-webkit-appearance: none;
		-moz-appearance: none;
		appearance: none;
	}

	.Consent-layer--body {
		position: absolute;
		left: 0;
		right: 0;
		background: var(--layer-body-bg-color, #FFF);
		top: var(--layer-header-height, 3.5em);
		bottom: var(--layer-footer-height, 4.5em)
	}

	.Consent-layer--footer {
		position: absolute;
		bottom: 0;
		left: 0;
		width: 100%;
		padding: 0 var(--default-margin, 1.25em);
		height: var(--layer-footer-height, 4.5em);
		display: flex;
		justify-content: flex-end;
		align-items: center;
		background: var(--layer-footer-bg-color, #FFF);
		border-top: 1px solid var(--layer-border-color, #e4e5e6)
	}

	@media (min-width: 768px) {
		.Consent-layer--footer {
			justify-content: space-between
		}
	}

	.Consent-layer--label-all {
		color: var(--layer-footer-font-color, #000f37);
		display: none
	}

	@media (min-width: 768px) {
		.Consent-layer--label-all {
			display: block;
			width: 30%;
			padding-right: var(--default-margin, 1.25em)
		}
	}

	.Consent-layer--actions {
		display: flex;
		align-items: center;
		margin: 0 -.625em;
		width: calc(100% + 1.25em)
	}

	@media (min-width: 768px) {
		.Consent-layer--actions {
			width: calc(70% + .625em)
		}
	}

	.Consent-layer button.denyAll,
	.Consent-layer button.allowAll {
		white-space: wrap
	}

	@media (min-width: 576px) {
		.Consent-layer button.denyAll,
		.Consent-layer button.allowAll {
			display: inline-block
		}
	}

	@media (max-width: 576px) {
		.Consent-layer button.save {
			padding: 0 2em;
			width: auto;
			margin-left: auto
		}
	}

	#Consent {
		z-index: 100;
		--default-margin: 1.25em;
		--font-size-reset: 1rem;
		--btn-font-color: #FFF;
		--btn-border-color: #FFF;
		--btn-bg-color: #004c93;
		--btn-prime-font-color: #004c93;
		--btn-prime-border-color: #FFF;
		--btn-prime-bg-color: #FFF;
		--btn-inv-font-color: #004c93;
		--btn-inv-border-color: #004c93;
		--btn-inv-bg-color: #FFF;
		--btn-prime-inv-font-color: #FFF;
		--btn-prime-inv-border-color: #004c93;
		--btn-prime-inv-bg-color: #004c93;
		--link-list-font-color: #FFF;
		--link-list-separator-color: #FFF;
		--banner-logo-offset: 100px;
		--banner-bg-color: #004c93;
		--banner-font-color: #FFF;
		--banner-box-shadow: 1px 1px 6px 4px rgba(0, 0, 0, .2);
		--layer-header-height: 3.5em;
		--layer-header-bg-color: #FFF;
		--layer-header-font-color: #000f37;
		--layer-body-bg-color: #FFF;
		--layer-tab-bg-color: #FFF;
		--layer-tab-font-color: #000f37;
		--layer-tab-active-bg-color: #004c93;
		--layer-tab-active-font-color: #FFF;
		--layer-bg-dark: #004c93;
		--layer-font-light: #FFF;
		--layer-font-dark: #000f37;
		--layer-border-color: #e4e5e6;
		--layer-footer-bg-color: #FFF;
		--layer-footer-font-color: #000f37;
		--layer-footer-height: 4.5em;
		--switch-border-color: #e4e5e6;
		--switch-handle-color: #FFF;
		--switch-bg-off: #FFF;
		--switch-bg-on: #00AA00;
		--switch-width: 45px;
		--switch-height: 20px;
		--switch-always-on-font-color: #00AA00;
		--switch-always-on-bg-color: #FFF
	}

	.Consent--app {
		font-size: var(--size--2);
		line-height: 1.25;
	}

	.Consent--app [role="dialog"][aria-hidden="true"] {
		display: none;
	}

	body .Consent--app,
	body .Consent--app *,
	body .Consent--app *:before,
	body .Consent--app *:after {
		box-sizing: border-box
	}
</style>
